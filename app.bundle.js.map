{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://webpack-dev-template/./src/components/ship.js","webpack://webpack-dev-template/./src/components/gameboard.js","webpack://webpack-dev-template/./src/components/players.js","webpack://webpack-dev-template/./src/algorithms/easy-algorithm.js","webpack://webpack-dev-template/./src/components/computer.js","webpack://webpack-dev-template/./src/algorithms/binary-search-tree.js","webpack://webpack-dev-template/./src/controllers/cord-value-converter.js","webpack://webpack-dev-template/./src/algorithms/board-randomizer.js","webpack://webpack-dev-template/./src/controllers/dom-controller.js","webpack://webpack-dev-template/./src/controllers/game-controller.js","webpack://webpack-dev-template/./src/controllers/drag-n-drop.js","webpack://webpack-dev-template/./src/pages/main-game.js","webpack://webpack-dev-template/./src/pages/pvp-screen.js","webpack://webpack-dev-template/./src/pages/pvc-screen.js","webpack://webpack-dev-template/./src/pages/initial-load.js","webpack://webpack-dev-template/./src/index.js"],"sourcesContent":["class Ship {\n  constructor(length, name) {\n    this.length = length;\n    this.name = name;\n    this.health = length;\n  }\n\n  hit() {\n    this.health -= 1;\n  }\n\n  isSunk() {\n    if (this.health === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport { Ship };\n","/* eslint-disable */\nimport { Ship } from \"./ship\";\n\nclass Gameboard {\n  constructor(player) {\n    this.player = player;\n    this.board = this.createBoard();\n    this.missedShots = [];\n    this.shipCount = 0;\n    this.ships = [];\n  }\n\n  createBoard() {\n    let yAxis = [];\n    let boardPart;\n\n    for (let i = 0; i < 10; i++) {\n      yAxis.push([]);\n      for (let x = 0; x < 10; x++) {\n        boardPart = new Tile({ xCord: x, yCord: i });\n        yAxis[i].push(boardPart);\n      }\n    }\n    return yAxis;\n  }\n\n  placeShip(shipObj, cordObj) {\n    let ship = this.unpackShip(shipObj);\n    let placementData;\n    cordObj.direction === \"horizontal\"\n      ? (placementData = this.placeOnX(cordObj))\n      : (placementData = this.placeOnY(cordObj));\n\n    /*There was a cleaner implementation, but this worked best because I didn't have to \n    think about what happens if somewhere mid-way of adding a ship to tiles, we found out \n    that one of the co-ordinates was taken*/\n\n    placementData.forEach((tile) => {\n      tile.addShip(ship);\n    });\n\n    this.ships.push(ship);\n\n    this.shipCount += 1;\n  }\n\n  unpackShip(shipObj) {\n    let ship = new Ship(shipObj.health, shipObj.type);\n    return ship;\n  }\n\n  placeOnX(cordObj) {\n    let { xStart, xEnd, yStart } = cordObj;\n    let tileArr = [];\n    let tile;\n\n    for (let x = xStart; x < xEnd; x++) {\n      tile = this.board[yStart][x];\n      if (tile.contains !== null) this.STOP();\n      tileArr.push(tile);\n    }\n\n    return tileArr;\n  }\n\n  placeOnY(cordObj) {\n    let { xStart, xEnd, yStart, yEnd } = cordObj;\n    let tileArr = [];\n    let tile;\n\n    for (let y = yStart; y < yEnd; y++) {\n      tile = this.board[y][xEnd];\n      if (tile.contains !== null) this.STOP();\n      tileArr.push(tile);\n    }\n\n    return tileArr;\n  }\n\n  receiveAttack(attackCordinates) {\n    if (!Array.isArray(attackCordinates)) {\n      throw new Error(\n        `Something somewhere blew up. Error type: ${attackCordinates}`\n      );\n    }\n\n    let [x, y] = attackCordinates;\n\n    let attackedTile = this.board[y][x];\n    if (attackedTile.hit === true) {\n      return {\n        attack: \"failed\",\n        message: \"repetition\",\n      };\n    } else if (attackedTile.hasShip === false) {\n      attackedTile.hit = true;\n      this.missedShots.push(attackCordinates);\n      return {\n        attack: \"success\",\n        message: \"miss\",\n      };\n    } else if (attackedTile.hasShip === true && attackedTile.hit === false) {\n      attackedTile.takeHit();\n\n      let isSunk = attackedTile.contains.isSunk();\n\n      if (isSunk === true) {\n        this.shipCount -= 1;\n        return {\n          attack: \"success\",\n          message: \"sunk\",\n        };\n      } else {\n        return {\n          attack: \"success\",\n          message: \"bullseye\",\n        };\n      }\n    }\n  }\n\n  STOP() {\n    throw new Error(\"space already taken\");\n  }\n\n  isEmpty() {\n    return this.shipCount === 0 ? true : false;\n  }\n\n  shortestShip() {\n    return this.board();\n  }\n}\n\n//something akin to a linked list? like a Node\nclass Tile {\n  constructor(positionObj) {\n    this.hit = false;\n    this.hasShip = false;\n    this.position = positionObj;\n    this.contains = null;\n  }\n\n  addShip(ship) {\n    this.contains = ship;\n    this.hasShip = true;\n  }\n\n  takeHit() {\n    this.hit = true;\n    this.contains.hit();\n  }\n}\n\nexport { Gameboard };\n","import { Gameboard } from \"./gameboard\";\n\nclass Player {\n  constructor(type, name = \"Mr BotEvil\") {\n    this.type = type;\n    this.name = name;\n    this.gameboard = this.createBoard(name);\n    this.opponent = null;\n  }\n\n  createBoard(name) {\n    let board = new Gameboard(name);\n    return board;\n  }\n\n  addOpponent(opponentObj) {\n    this.opponent = opponentObj;\n  }\n}\n\nexport { Player };\n","const easyAlgorithm = {\n  getRandomCord: function () {\n    let x = Math.round(Math.random() * 9);\n    let y = Math.round(Math.random() * 9);\n\n    return [x, y];\n  },\n  play: function () {\n    return easyAlgorithm.getRandomCord();\n  },\n};\n\nexport { easyAlgorithm };\n","import { easyAlgorithm } from \"../algorithms/easy-algorithm\";\n\nclass Computer {\n  constructor(difficulty, playerObj) {\n    this.difficulty = difficulty;\n    this.playerObj = playerObj;\n    //send back a callback\n    this.algorithm = this.getAlgorithm();\n  }\n\n  play() {\n    let [x, y] = this.algorithm();\n    let attackResponse = this.playerObj.opponent.gameboard.receiveAttack([\n      x,\n      y,\n    ]);\n\n    return {\n      attackResponse,\n      x,\n      y,\n    };\n  }\n\n  //Hunt and Target algorithm is in-common between all\n  getAlgorithm() {\n    if (this.difficulty === \"easy\") {\n      //victory through randomness\n      return easyAlgorithm.play; //return a callback\n      //return easyAlgorithm.getRandomCord\n    }\n  }\n}\n\nexport { Computer };\n\n/*\n  Project is taking too long, so we are cutting down features (\n\n  Feature graveyard:\n   unpackTrail(attackResponce, cords, lastAction) {\n    if (\n      attackResponce.message === \"repetition\" &&\n      this.playerObj.opponent.gameboard.shipCount !== 0\n    ) {\n      return this.play();\n    } else if (attackResponce.message === \"bullseye\") {\n      //keep up if succesful\n      trailingAlgorithm.actionList.unshift(lastAction);\n      trailingAlgorithm.trailedCords = cords; //keep trailing the succesful cords\n      return this.play();\n    } else if (attackResponce.message === \"sunk\") {\n      trailingAlgorithm.stop();\n      return this.algorithm();\n    } else {\n      //if trailing a cord, reset\n      trailingAlgorithm.trailedCords = trailingAlgorithm.trailedData[0];\n      return attackResponce;\n    }\n  }\n\n  //of the opponent\n  getShortestShipFactor() {\n    //very verbose, but look how it explains itself\n    if (this.playerObj.opponent.gameboard.isEmpty()) {\n      return 0;\n    }\n\n    let opponentShips = this.playerObj.opponent.gameboard.ships;\n\n    let shipsAlive = [];\n\n    opponentShips.forEach((ship) => {\n      if (!ship.isSunk()) {\n        shipsAlive.push(ship);\n      }\n    });\n\n    let sortedShips = shipsAlive.sort((a, b) => a.health - b.health);\n    return sortedShips[0].length;\n  }\n\n\n  else if (this.difficulty === \"normal\") {\n        easy 2-step-space based algorithm, victory through efficient space-ing. Parody Algorithm.\n      \n      Improved: The space between each shot is the length of the shortest living ship\n      return;\n    } else {\n      You know shit is about to get real when I link a video to Vsauce\n      \n      https://www.youtube.com/watch?v=LbALFZoRrw8\n\n      Give a warning: You Are going to Loose\n\n      Algorithm: Probability maps\n      \n      return;\n    }\n*/\n","//To speed up cord look-up on board-randomizer\n\nclass Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nclass Tree {\n  constructor(arr) {\n    this.root = this.buildTree(arr);\n  }\n\n  //redundant-ish for our use-case\n  buildTree(arr, startIndex = 0, endIndex = arr.length - 1) {\n    if (startIndex > endIndex) {\n      return null;\n    }\n\n    let midIndex = Math.floor((startIndex + endIndex) / 2);\n    let root = new Node(arr[midIndex]);\n\n    root.left = this.buildTree(arr, startIndex, midIndex - 1);\n    root.right = this.buildTree(arr, midIndex + 1, endIndex);\n\n    return root;\n  }\n\n  insert(value) {\n    //create a new node if value isn't already in the array\n    let currentNode = this.root;\n    let previousNode;\n\n    while (currentNode !== null) {\n      if (value === currentNode.value) {\n        return;\n      }\n\n      if (value > currentNode.value) {\n        previousNode = currentNode;\n        currentNode = currentNode.right;\n      } else {\n        previousNode = currentNode;\n        currentNode = currentNode.left;\n      }\n    }\n\n    let newValue = new Node(value);\n\n    value > previousNode.value\n      ? (previousNode.right = newValue)\n      : (previousNode.left = newValue);\n  }\n\n  bstContains(value, currentNode = this.root) {\n    if (currentNode === null) {\n      return false;\n    }\n\n    if (value === currentNode.value) {\n      return true;\n    } else if (value > currentNode.value) {\n      return this.bstContains(value, currentNode.right);\n    } else {\n      return this.bstContains(value, currentNode.left);\n    }\n  }\n}\n\nexport { Tree };\n\n/* \nBad implementation: infinite recursion:\n\n  bstContains(value) {\n    if (value === null) {\n      return false;\n    } else if (value === this.root) {\n      return true;\n    } else if (value > this.root) {\n      return this.bstContains(this.root.right);\n    } else if (value < this.root) {\n      return this.bstContains(this.root.left);\n    } else {\n      throw new Error(\"Kaboom\");\n    }\n  }\n*/\n","const cordConverter = {\n  flattenCords: function (x, y) {\n    let index = x + y * 10;\n    return index;\n  },\n  unpackCords: function (index) {\n    //10's are Y pos\n    // 1's are X pos\n    if (index < 10) {\n      return [index, 0]; //height is 0, less than 10\n    } else {\n      const x = index % 10;\n      const y = Math.floor(index / 10);\n      return [x, y];\n    }\n  },\n};\n\nexport { cordConverter };\n","/* \n  Cordinates are not checked for duplicates or collisions, TODO\n*/\n\nimport { Tree } from \"./binary-search-tree\"; //optimising look-up time to 0(n) vs O(n!)\nimport { cordConverter } from \"../controllers/cord-value-converter\";\n\nconst boardRandomizer = {\n  cordTree: null,\n  cordArr: [],\n  resetData: function () {\n    this.cordTree = null;\n    this.cordArr = [];\n  },\n  initiate: function (ships) {\n    this.cordTree = new Tree([-1]); // the only value that wont conflict with anything\n    boardRandomizer.assignRandomDirection(ships);\n    return boardRandomizer.cordArr;\n  },\n  assignRandomDirection: function (ships) {\n    Object.keys(ships).forEach((key) => {\n      ships[key].direction = boardRandomizer.generateDirectionToken();\n      boardRandomizer.generateRandomPlacement(ships[key]);\n    });\n  },\n  generateDirectionToken() {\n    let rToken = Math.round(Math.random() * 2);\n    if (rToken === 1) {\n      return \"horizontal\";\n    } else {\n      return \"vertical\";\n    }\n  },\n  generateRandomPlacement(shipObj) {\n    if (shipObj.direction === \"horizontal\") {\n      boardRandomizer.cordArr.push(boardRandomizer.placeH(shipObj));\n    } else {\n      boardRandomizer.cordArr.push(boardRandomizer.placeV(shipObj));\n    }\n  },\n  placeH: function (shipObj) {\n    let xStart = boardRandomizer.genRX(shipObj.health, 7);\n    let yStart = boardRandomizer.genRY(1, 9);\n    let yEnd = yStart;\n    let xEnd = xStart + shipObj.health;\n    let direction = shipObj.direction;\n\n    for (let i = xStart; i < xEnd; i++) {\n      if (!this.checkCollision(i, yStart)) {\n        return this.placeH(shipObj);\n      }\n    }\n\n    //TODO: improve, I got tired\n    let flatCord = null;\n    for (let i = xStart; i < xEnd; i++) {\n      flatCord = boardRandomizer.getFlattenedCords(i, yStart);\n      boardRandomizer.cordTree.insert(flatCord);\n    }\n    return {\n      xStart,\n      xEnd,\n      yStart,\n      yEnd,\n      direction,\n    };\n  },\n  placeV: function (shipObj) {\n    let yStart = boardRandomizer.genRY(shipObj.health, 7);\n    let xStart = boardRandomizer.genRX(1, 9);\n    let yEnd = yStart + shipObj.health;\n    let xEnd = xStart;\n    let direction = shipObj.direction;\n\n    for (let i = yStart; i < yEnd; i++) {\n      if (!this.checkCollision(xStart, i)) {\n        return this.placeV(shipObj);\n      }\n    }\n\n    let flatCord = null;\n    for (let i = yStart; i < yEnd; i++) {\n      flatCord = boardRandomizer.getFlattenedCords(xStart, i);\n      boardRandomizer.cordTree.insert(flatCord);\n    }\n    return {\n      xStart,\n      xEnd,\n      yStart,\n      yEnd,\n      direction,\n    };\n  },\n  /* genRX and genRY can probably be the same function, but I would rather\n  not risk any implication / potential side effects of removing them */\n  genRX: function (shipLength, factor) {\n    let rX = Math.round(Math.random() * factor); //lowest ship length is 2\n    if (rX + shipLength <= 10) {\n      return rX;\n    } else {\n      //if the ship exceeds the boundary, try again\n      return boardRandomizer.genRX(shipLength, factor);\n    }\n  },\n  genRY: function (shipLength, factor) {\n    let rY = Math.round(Math.random() * factor); //lowest ship length is 2\n    if (rY + shipLength <= 10) {\n      return rY;\n    } else {\n      //if the ship exceeds the boundary, try again\n      return boardRandomizer.genRY(shipLength, factor);\n    }\n  },\n  checkCollision: function (x, y) {\n    let flatCords = this.getFlattenedCords(x, y);\n    return !this.cordTree.bstContains(flatCords);\n  },\n  getFlattenedCords: function (x, y) {\n    return cordConverter.flattenCords(x, y);\n  },\n};\n\nexport { boardRandomizer };\n","import { boardRandomizer } from \"../algorithms/board-randomizer\";\nimport { gameController } from \"./game-controller\";\nimport { cordConverter } from \"./cord-value-converter\";\nimport { gameInfo } from \"../pages/main-game\";\n\nconst domController = {\n  playerDOMs: [],\n  placeableShips: [],\n  playerPlacing: 0,\n  currentShipContainer: null,\n  createDOMBoard: function () {\n    const boardContainer = document.createElement(\"div\");\n    let domArr = [];\n\n    for (let i = 0; i < 100; i++) {\n      let boardPiece = document.createElement(\"div\");\n      boardPiece.classList.add(\"board-piece\");\n      boardPiece.classList.add(\"available\");\n      boardPiece.setAttribute(\"id\", `cord-${i}`);\n      domArr.push(boardPiece);\n      boardContainer.appendChild(boardPiece);\n    }\n\n    this.playerDOMs.push(domArr);\n    boardContainer.classList.add(\"board-container\");\n\n    return boardContainer;\n  },\n  unpackShips: function (shipsObj) {\n    const container = document.createElement(\"div\");\n    const shipToPlaceContainer = document.createElement(\"div\");\n    const placeShipText = document.createElement(\"div\");\n    const currentShip = document.createElement(\"div\");\n\n    container.classList.add(\"place-ships-menu\");\n    shipToPlaceContainer.classList.add(\"ships-to-place-container\");\n    currentShip.classList.add(\"current-ship\");\n    placeShipText.classList.add(\"place-ship-text\");\n\n    placeShipText.textContent = \"Currently placing:\";\n\n    container.appendChild(shipToPlaceContainer);\n    shipToPlaceContainer.appendChild(placeShipText);\n    shipToPlaceContainer.appendChild(currentShip);\n\n    Object.keys(shipsObj).forEach((key) => {\n      let shipDOM = this.unpackShip(shipsObj[key].health, key);\n      container.appendChild(shipDOM);\n      this.placeableShips.push(shipDOM);\n    });\n\n    currentShip.appendChild(this.placeableShips[0]);\n\n    this.makeShipDraggable(this.placeableShips[0]);\n    this.placeableShips.splice(0, 1);\n    this.currentShipContainer = currentShip;\n\n    return container;\n  },\n  getNextShip: function () {\n    let currentShip = document.querySelector(\".current-ship\");\n    currentShip.textContent = \"\";\n\n    if (this.placeableShips.length === 0) {\n      let shipToPlaceContainer = document.querySelector(\n        \".ships-to-place-container\"\n      );\n      let nextButton = document.createElement(\"button\");\n\n      nextButton.classList.add(\"confirm-selection\");\n      nextButton.textContent = \"Ready?\";\n\n      shipToPlaceContainer.appendChild(nextButton);\n      return nextButton;\n    }\n\n    currentShip.appendChild(this.placeableShips[0]);\n\n    this.makeShipDraggable(this.placeableShips[0]);\n    this.placeableShips.splice(0, 1);\n    this.currentShipContainer = currentShip;\n  },\n  getShipCount: function () {\n    return this.placeableShips.length;\n  },\n  makeShipDraggable: function (shipDOM) {\n    shipDOM.setAttribute(\"draggable\", \"true\");\n  },\n  unpackShip: function (health, shipName) {\n    const shipDetailsContainer = document.createElement(\"div\");\n    const shipNameDisplay = document.createElement(\"div\");\n    const shipContainer = document.createElement(\"div\");\n\n    shipDetailsContainer.appendChild(shipNameDisplay);\n    shipDetailsContainer.appendChild(shipContainer);\n\n    for (let i = 0; i < health; i++) {\n      let shipPiece = document.createElement(\"span\");\n      shipPiece.classList.add(\"ship-piece\");\n\n      shipContainer.appendChild(shipPiece);\n    }\n\n    shipNameDisplay.textContent = shipName;\n\n    shipDetailsContainer.classList.add(\"ship-details-container\");\n    shipContainer.classList.add(\"ship-container\");\n    shipContainer.setAttribute(\"id\", shipName);\n    shipNameDisplay.setAttribute(\"class\", \"ship-name-display\");\n\n    return shipDetailsContainer;\n  },\n  createButtonToolkit: function () {\n    const toolKitContainer = document.createElement(\"div\");\n    const randomizeButton = document.createElement(\"button\");\n\n    toolKitContainer.classList.add(\"toolkit-container\");\n    toolKitContainer.appendChild(randomizeButton);\n\n    randomizeButton.textContent = \"Randomize Selection\";\n\n    randomizeButton.classList.add(\"randomize-button\");\n\n    //the board MUST BE CLEAN AND RESET\n    randomizeButton.addEventListener(\n      \"click\",\n      toolkitController.randomizePlacement\n    );\n\n    randomizeButton.addEventListener(\"click\", domController.markAllPlaced);\n\n    return toolKitContainer;\n  },\n  markAllPlaced: function () {\n    //should be better\n    let shipToPlaceContainer = document.querySelector(\n      \".ships-to-place-container\"\n    );\n    let nextButton = document.createElement(\"button\");\n\n    nextButton.classList.add(\"confirm-selection\");\n    shipToPlaceContainer.textContent = \"\";\n    nextButton.textContent = \"Ready?\";\n\n    shipToPlaceContainer.appendChild(nextButton);\n\n    nextButton.addEventListener(\"click\", domController.confirmSelection);\n  },\n  confirmSelection: function (e) {\n    e.target.setAttribute(\"disabled\", \"\");\n    gameInfo.continue(boardRandomizer.cordArr);\n  },\n};\n\nconst toolkitController = {\n  shipCord: [],\n  randomizePlacement: function () {\n    toolkitController.resetPlacement();\n\n    let ships = gameController.getShips();\n    let cordArr = boardRandomizer.initiate(ships);\n    toolkitController.unpackCords(cordArr);\n\n    boardRandomizer.resetData();\n  },\n  unpackCords: function (cordArr) {\n    cordArr.forEach((cord) => {\n      let { xStart, xEnd, yStart, yEnd } = cord;\n\n      if (cord.direction === \"horizontal\") {\n        for (let i = xStart; i < xEnd; i++) {\n          let fCord = cordConverter.flattenCords(i, yStart);\n          toolkitController.shipCord.push(fCord);\n          toolkitController.placeShip();\n        }\n      } else {\n        for (let i = yStart; i < yEnd; i++) {\n          let fCord = cordConverter.flattenCords(xStart, i);\n          toolkitController.shipCord.push(fCord);\n          toolkitController.placeShip();\n        }\n      }\n    });\n  },\n  placeShip: function () {\n    let startCord = toolkitController.shipCord[0];\n    let endIndex = toolkitController.shipCord.length - 1;\n    let endCord = toolkitController.shipCord[endIndex];\n\n    toolkitController.markDOMTaken(startCord, endCord);\n    toolkitController.shipCord = [];\n  },\n  markDOMTaken: function (startCord, endCord) {\n    let playerPlacing = domController.playerPlacing;\n    let playerDOM = domController.playerDOMs[playerPlacing];\n\n    for (startCord; startCord <= endCord; startCord++) {\n      playerDOM[startCord].classList.remove(\"available\");\n      playerDOM[startCord].classList.add(\"ship-present\");\n      playerDOM[startCord].classList.add(\"unavailable\");\n    }\n  },\n  resetPlacement: function () {\n    let takenSlots = document.querySelectorAll(\".unavailable\");\n    takenSlots.forEach((slot) => {\n      slot.classList.remove(\"unavailable\");\n      slot.classList.remove(\"ship-present\");\n      slot.classList.add(\"available\");\n    });\n\n    let dragoverSlots = document.querySelectorAll(\".dragover\");\n    dragoverSlots.forEach((slot) => {\n      slot.classList.remove(\"dragover\");\n    });\n\n    let invalidSlots = document.querySelectorAll(\".invalid\");\n    invalidSlots.forEach((slot) => {\n      slot.classList.remove(\"invalid\");\n    });\n  },\n};\n\n// post-start controls\nconst activeGameController = {\n  p1DOMBoard: null,\n  p2DOMBoard: null,\n  initiate: function () {\n    const contentSpace = document.getElementById(\"content\");\n    contentSpace.textContent = \"\";\n\n    //I've checked React for a bit, the idea is kind of like React..\n    const activeGameContainer = document.createElement(\"div\");\n    const p1BoardContainer = activeGameController.createP1DOMBoard();\n    const infoTableContainer = activeGameController.createInfoTable();\n    const p2BoardContainer = activeGameController.createP2DOMBoard();\n    const playerNameContainer = activeGameController.createNamesContainer();\n\n    activeGameContainer.classList.add(\"active-game-controller\");\n    activeGameContainer.appendChild(playerNameContainer);\n    activeGameContainer.appendChild(p1BoardContainer);\n    activeGameContainer.appendChild(infoTableContainer);\n    activeGameContainer.appendChild(p2BoardContainer);\n\n    contentSpace.appendChild(activeGameContainer);\n  },\n  createNamesContainer: function () {\n    const nameContainer = document.createElement(\"div\");\n    const player1Name = document.createElement(\"p\");\n    const player2Name = document.createElement(\"p\");\n\n    nameContainer.classList.add(\"name-container\");\n    player1Name.classList.add(\"player1-name\");\n    player2Name.classList.add(\"player2-name\");\n\n    nameContainer.appendChild(player1Name);\n    nameContainer.appendChild(player2Name);\n\n    return nameContainer;\n  },\n  /* TODO:\n    1 - Add event listeners for hits\n    2 - Make unhit tiles look like animated water\n    3 - Think about how the display will look like, current idea:\n    ----------------------------------------------------------------\n    ----------------------BATTLESHIP--------------------------------\n    ----------------------------------------------------------------\n          PlayerName-------Information Table----------Player2Name\n          BOARD1 ----------Information Table ---------BOARD2\n    ----------------------------------------------------------------\n    ----------------------------------------------------------------\n\n    4 - Endgame conditions: what happens when someone wins? do we just refresh the page?\n  */\n  createP1DOMBoard: function () {\n    const boardContainer = document.createElement(\"div\");\n    let domArr = [];\n\n    for (let i = 0; i < 100; i++) {\n      let boardPiece = document.createElement(\"div\");\n      boardPiece.classList.add(\"player-one-board-piece\");\n      boardPiece.classList.add(\"unhit\");\n      boardPiece.setAttribute(\"id\", `player-one-cord-${i}`);\n      domArr.push(boardPiece);\n      boardContainer.appendChild(boardPiece);\n    }\n\n    activeGameController.p1DOMBoard = domArr;\n    boardContainer.classList.add(\"player-one-board-container\");\n\n    return boardContainer;\n  },\n  createInfoTable: function () {\n    const infoTableContainer = document.createElement(\"div\");\n    const turnInfo = document.createElement(\"div\");\n    const clickToSpy = document.createElement(\"div\");\n\n    turnInfo.setAttribute(\"id\", \"turn-info\");\n    infoTableContainer.setAttribute(\"id\", \"info-table\");\n\n    clickToSpy.setAttribute(\"id\", \"click-to-spy\");\n\n    clickToSpy.textContent = \"Click to spy\"; //modal\n\n    infoTableContainer.appendChild(turnInfo);\n    infoTableContainer.appendChild(clickToSpy);\n\n    return infoTableContainer;\n  },\n  createP2DOMBoard: function () {\n    const boardContainer = document.createElement(\"div\");\n    let domArr = [];\n\n    for (let i = 0; i < 100; i++) {\n      let boardPiece = document.createElement(\"div\");\n      boardPiece.classList.add(\"player-two-board-piece\");\n      boardPiece.classList.add(\"unhit\");\n      boardPiece.setAttribute(\"id\", `player-two-cord-${i}`);\n      domArr.push(boardPiece);\n      boardContainer.appendChild(boardPiece);\n    }\n\n    activeGameController.p2DOMBoard = domArr;\n    boardContainer.classList.add(\"player-two-board-container\");\n\n    return boardContainer;\n  },\n  createSpyModal: function () {\n    const modal = document.createElement(\"dialog\");\n    const closeButton = document.createElement(\"div\");\n    const enemyLastAttack = document.createElement(\"p\");\n    const enemyShipData = document.createElement(\"p\");\n\n    modal.classList.add(\"spy-modal\");\n    closeButton.classList.add(\"close-modal\");\n    enemyLastAttack.classList.add(\"enemy-last-attack\");\n    enemyShipData.classList.add(\"enemy-ship-data\");\n\n    modal.appendChild(closeButton);\n    modal.appendChild(enemyLastAttack);\n    modal.appendChild(enemyShipData);\n\n    closeButton.textContent = \"x\";\n\n    closeButton.addEventListener(\"click\", activeGameController.closeModal);\n    return modal;\n  },\n  closeModal: function () {\n    const modalSpace = document.querySelector(\"#modal-reserved-space\");\n    modalSpace.textContent = \"\";\n  },\n  endGameModal: function (winner) {\n    const modalSpace = document.querySelector(\"#modal-reserved-space\");\n    const modal = document.createElement(\"dialog\");\n    const closeButton = document.createElement(\"div\");\n    const flavorText = document.createElement(\"p\");\n    const restartButton = document.createElement(\"button\");\n\n    closeButton.textContent = \"x\";\n    restartButton.textContent = \"Restart?\";\n    modalSpace.textContent = \"\";\n    flavorText.innerHTML = `Congratulations to <strong>${winner}</strong> on their succesful conquest of the seas! <br><br>You can play again by pressing restart`;\n\n    closeButton.classList.add(\"close-modal\");\n    flavorText.classList.add(\"flavor-text\");\n    restartButton.classList.add(\"restart-button\");\n    modal.classList.add(\"end-game-modal\");\n\n    closeButton.addEventListener(\"click\", activeGameController.closeModal);\n    restartButton.addEventListener(\"click\", activeGameController.killswitch);\n    modalSpace.appendChild(modal);\n    modal.appendChild(closeButton);\n    modal.appendChild(flavorText);\n    modal.appendChild(restartButton);\n\n    modal.show();\n  },\n  killswitch: function () {\n    window.location.reload(); //thx stackoverflow\n  },\n};\n\nexport { domController, activeGameController };\n","/*eslint-disable*/\nimport { Player } from \"../components/players\";\nimport { Computer } from \"../components/computer\";\nimport { activeGameController, domController } from \"./dom-controller\";\nimport { cordConverter } from \"./cord-value-converter\";\n\n/* Almost like classes, but just easier to visualize. Data can get overwhelming, \nthis helps keep track of everything - this is my standard pattern for other projects*/\n\nconst gameController = {\n  players: [],\n  turn: 0,\n  createPlayer: function (type, name = \"\") {\n    let player = new Player(type, name);\n    this.players.push(player);\n  },\n  unpackGame: function (gameObj) {\n    return gameObj.type === \"pvp\"\n      ? this.startPVP(gameObj)\n      : this.startPVC(gameObj);\n  },\n  startPVC: function (gameObj) {\n    let player1 = new Player(\"player\", gameObj.player1Name);\n    let player2 = new Player(\"computer\");\n\n    player1.addOpponent(player2);\n    player2.addOpponent(player1);\n\n    player2 = new Computer(gameObj.cDifficulty, player2);\n\n    this.players.push(player1);\n    this.players.push(player2);\n\n    return {\n      player1,\n      player2: player2.playerObj,\n      computerControls: player2, //wow wtf, this idea is kinda rad\n      gametype: \"pvc\",\n    };\n  },\n  startPVP: function (gameObj) {\n    let player1 = new Player(\"player\", gameObj.player1Name);\n    let player2 = new Player(\"player\", gameObj.player2Name);\n\n    player1.addOpponent(player2);\n    player2.addOpponent(player1);\n\n    this.players.push(player1);\n    this.players.push(player2);\n\n    return {\n      player1,\n      player2,\n      gametype: \"pvp\",\n    };\n  },\n  getShips() {\n    const carrier = {\n      health: 5,\n      type: \"carrier\",\n    };\n\n    const battleship = {\n      health: 4,\n      type: \"battleship\",\n    };\n\n    const cruiser = {\n      health: 3,\n      type: \"cruiser\",\n    };\n\n    const submarine = {\n      health: 3,\n      type: \"submarine\",\n    };\n\n    const destroyer = {\n      health: 2,\n      type: \"destroyer\",\n    };\n\n    return { carrier, battleship, cruiser, submarine, destroyer };\n  },\n  startGamePVC: function (p1Cordinates, p2Cordinates) {\n    let ships = gameController.getShips();\n    let shipArr = [];\n\n    Object.values(ships).forEach((ship) => {\n      shipArr.push(ship);\n    });\n\n    playerControls.initiate(\n      gameController.players[0],\n      gameController.players[1],\n      p1Cordinates,\n      p2Cordinates,\n      shipArr\n    );\n  },\n};\n\nconst playerControls = {\n  ships: null,\n  computerControl: null,\n  p1Object: null,\n  p2Object: null,\n  p1Cordinates: null,\n  p2Cordinates: null,\n  turnInfo: null,\n  initiate: function (\n    p1Object,\n    computerControl,\n    p1Cordinates,\n    p2Cordinates,\n    shipArr\n  ) {\n    this.ships = shipArr;\n    this.p1Object = p1Object;\n    this.computerControl = computerControl;\n    this.p2Object = computerControl.playerObj;\n    this.p1Cordinates = p1Cordinates;\n    this.p2Cordinates = p2Cordinates;\n\n    this.placeShipsOnObj();\n    activeGameController.initiate(); //it doesnt need to know anything\n    playerControls.activateListeners();\n    playerControls.appendNames();\n    playerControls.activateSpyTool();\n\n    this.turnInfo = document.querySelector(\"#turn-info\");\n    this.turnInfo.textContent = \"Round Start\";\n  },\n  appendNames: function () {\n    const p1NameContainer = document.querySelector(\".player1-name\");\n    const p2NameContainer = document.querySelector(\".player2-name\");\n\n    p1NameContainer.textContent = playerControls.p1Object.name;\n    p2NameContainer.textContent = playerControls.p2Object.name;\n  },\n  activateListeners: function () {\n    activeGameController.p2DOMBoard.forEach((tile) => {\n      tile.addEventListener(\"click\", playerControls.fire);\n    });\n  },\n  fire: function (e) {\n    e.preventDefault();\n\n    e.target.removeEventListener(\"click\", playerControls.fire);\n    e.target.classList.remove(\"unhit\");\n    e.target.classList.add(\"hit\");\n    //if not player's turn, ignore\n\n    let cord = playerControls.getCord(e.target);\n    playerControls.playerShoots(cord, e);\n  },\n  playerShoots: function (cord, e) {\n    const attackCords = cordConverter.unpackCords(cord);\n    const attackInfo =\n      playerControls.p2Object.gameboard.receiveAttack(attackCords);\n\n    playerControls.turnInfo.innerHTML = `Missle launch ${attackInfo.attack}! Ground Report: <strong>${attackInfo.message}</strong>`;\n\n    if (attackInfo.message !== \"miss\") {\n      e.target.classList.add(\"has-ship\");\n    }\n\n    console.log(playerControls.computerLost());\n    if (playerControls.computerLost()) {\n      endGame(playerControls.p1Object.name);\n    }\n\n    playerControls.computerResponds();\n  },\n  playerLost: function () {\n    return playerControls.p1Object.gameboard.shipCount === 0 ? true : false;\n  },\n  computerLost: function () {\n    return playerControls.p2Object.gameboard.shipCount === 0 ? true : false;\n  },\n  computerResponds: function () {\n    let { attackResponse, x, y } = playerControls.computerControl.play();\n\n    if (attackResponse.message === \"repetition\") {\n      return (attackResponse = playerControls.computerResponds());\n    }\n\n    let flatCord = cordConverter.flattenCords(x, y);\n\n    lastAttackData.p2LastAttackResponse = attackResponse;\n\n    let hitTile = document.getElementById(`player-one-cord-${flatCord}`);\n    hitTile.classList.remove(\"unhit\");\n    hitTile.classList.add(\"hit\");\n\n    if (attackResponse.message !== \"miss\") {\n      hitTile.classList.add(\"has-ship\");\n    }\n\n    if (playerControls.playerLost()) {\n      endGame(playerControls.p2Object.name);\n    }\n  },\n  getCord: function (tile) {\n    let cord = tile.getAttribute(\"id\");\n    return cord.substring(16);\n  },\n  placeShipsOnObj: function () {\n    let index = 0;\n    this.ships.forEach((ship) => {\n      playerControls.p1Object.gameboard.placeShip(\n        ship,\n        playerControls.p1Cordinates[index]\n      );\n      index++;\n    });\n\n    index *= 0;\n\n    this.ships.forEach((ship) => {\n      playerControls.p2Object.gameboard.placeShip(\n        ship,\n        playerControls.p2Cordinates[index]\n      );\n      index++;\n    });\n\n    if (this.p1Object.gameboard.shipCount < 5) {\n      throw new Error(\n        \"Something went wrong, you have less than 5 ships. Please re-fresh the page and place all the 5 ships again. Thank you for your understanding\"\n      );\n    }\n  },\n  activateSpyTool: function () {\n    let spyTool = document.querySelector(\"#click-to-spy\");\n    spyTool.addEventListener(\"click\", lastAttackData.getEnemyInformation);\n  },\n};\n\nconst lastAttackData = {\n  p2LastAttackResponse: null,\n  getEnemyInformation: function (e) {\n    e.preventDefault();\n    if (lastAttackData.p2LastAttackResponse === null) {\n      return;\n    }\n\n    let modalSpace = document.getElementById(\"modal-reserved-space\");\n    modalSpace.textContent = \"\";\n\n    let modal = activeGameController.createSpyModal();\n    modalSpace.appendChild(modal);\n    modal.show();\n\n    const enemyLastAttack = document.querySelector(\".enemy-last-attack\");\n    const enemyShipData = document.querySelector(\".enemy-ship-data\");\n\n    enemyLastAttack.innerHTML = `MUAHAHAHAAHA. Our super evil missle launch was a ${lastAttackData.p2LastAttackResponse.attack}! Ground Report: <strong>${lastAttackData.p2LastAttackResponse.message}</strong>`;\n\n    enemyShipData.textContent = `${playerControls.p1Object.name} sire, our intellegence reports that the enemy has ${playerControls.p2Object.gameboard.shipCount} ships alive!`;\n  },\n};\n\n//Add an end-game condition and pop-up\nfunction endGame(winner) {\n  activeGameController.endGameModal(winner);\n}\n\nexport { gameController };\n","/*eslint-disable*/\n\nimport { domController } from \"./dom-controller\";\nimport { cordConverter } from \"./cord-value-converter\";\nimport { gameInfo } from \"../pages/main-game\";\n\nconst dragHandler = {\n  playerBoardDOM: [],\n  currentPlayerDOM: null,\n  angle: \"horizontal\",\n  cordArray: [],\n  placedCords: [],\n  initiate: function (playerBoard) {\n    this.currentPlayerDOM = playerBoard;\n    this.playerBoardDOM.push(playerBoard);\n\n    this.enableDrag(playerBoard);\n  },\n  getShipLength: function () {\n    return domController.currentShipContainer.childNodes[0].childNodes[1]\n      .children.length;\n  },\n  enableDrag: function (board) {\n    horizontalController.initiate(board);\n  },\n  createShipCordObject: function (startCord, endCord) {\n    dragHandler.cordArray = []; //garbage collection\n\n    //export these\n    let [xStart, yStart] = cordConverter.unpackCords(startCord);\n    let [xEnd, yEnd] = cordConverter.unpackCords(endCord);\n    let shipDirection = dragHandler.angle;\n\n    return {\n      xStart,\n      xEnd,\n      yStart,\n      yEnd,\n      shipDirection,\n    }; //this is exactly like in the gameboard.test\n  },\n  isAvailable: function () {\n    let cordList = dragHandler.cordArray;\n    let areValid = true;\n    cordList.forEach((cord) => {\n      if (!cord.classList.contains(\"available\")) {\n        areValid = false;\n      }\n    });\n    return areValid;\n  },\n\n  getCord: function (tile) {\n    let cord = tile.getAttribute(\"id\");\n    return cord.substring(5);\n  },\n  placeNextShip: function () {\n    if (domController.getShipCount() === 0) {\n      let nextButton = domController.getNextShip();\n      nextButton.addEventListener(\"click\", dragHandler.confirmSelection);\n    } else {\n      domController.getNextShip();\n    }\n  },\n  confirmSelection: function (e) {\n    e.target.setAttribute(\"disabled\", \"\");\n    gameInfo.continue(dragHandler.placedCords);\n  },\n  disableV: function () {\n    dragHandler.currentPlayerDOM.forEach((tile) => {\n      tile.removeEventListener(\n        \"dragover\",\n        verticalController.highlightPlacement\n      );\n      tile.removeEventListener(\"dragleave\", verticalController.unhighlight);\n      tile.removeEventListener(\"drop\", verticalController.placeShip);\n    });\n  },\n  disableH: function () {\n    dragHandler.currentPlayerDOM.forEach((tile) => {\n      tile.removeEventListener(\n        \"dragover\",\n        horizontalController.highlightPlacement\n      );\n      tile.removeEventListener(\"dragleave\", horizontalController.unhighlight);\n      tile.removeEventListener(\"drop\", horizontalController.placeShip);\n    });\n  },\n  toggle: function () {\n    const shipContainer = document.querySelector(\".ship-container\");\n    if (dragHandler.angle === \"horizontal\") {\n      if (shipContainer !== null) {\n        shipContainer.classList.add(\"vertical\");\n      }\n      dragHandler.angle = \"vertical\";\n      dragHandler.disableH();\n      verticalController.initiate(dragHandler.currentPlayerDOM);\n    } else {\n      if (shipContainer !== null) {\n        shipContainer.classList.remove(\"vertical\");\n      }\n      dragHandler.angle = \"horizontal\";\n      dragHandler.disableV();\n      horizontalController.initiate(dragHandler.currentPlayerDOM);\n    }\n  },\n};\n\nconst horizontalController = {\n  initiate: function (board) {\n    board.forEach((tile) => {\n      tile.addEventListener(\n        \"dragover\",\n        horizontalController.highlightPlacement\n      );\n\n      tile.addEventListener(\"dragleave\", horizontalController.unhighlight);\n\n      tile.addEventListener(\"drop\", horizontalController.placeShip); //unless user toggles\n    });\n  },\n  unhighlight: function (e) {\n    e.preventDefault();\n    dragHandler.cordArray.forEach((cord) => {\n      cord.classList.remove(\"dragover\");\n    });\n  },\n  highlightPlacement: function (e) {\n    e.preventDefault();\n    let shipLength = dragHandler.getShipLength();\n    let startCord = Number(dragHandler.getCord(e.target));\n\n    for (let i = 0; i < shipLength; i++) {\n      if (horizontalController.isValid(startCord + i, i) === true) {\n        dragHandler.cordArray[i] = dragHandler.currentPlayerDOM[startCord + i];\n        dragHandler.currentPlayerDOM[startCord + i].classList.add(\"dragover\");\n      } else {\n        dragHandler.cordArray.forEach((cord) => {\n          cord.classList.add(\"invalid\");\n        });\n        return setTimeout(() => {\n          dragHandler.cordArray.forEach((cord) => {\n            cord.classList.remove(\"invalid\");\n          });\n        }, 2000);\n      }\n    }\n\n    e.target.classList.add(\"dragover\");\n  },\n\n  placeShip: function (e) {\n    e.preventDefault();\n    let startCord = Number(dragHandler.getCord(e.target));\n    let shipLength = dragHandler.getShipLength();\n\n    for (let i = 0; i < shipLength; i++) {\n      if (horizontalController.isValid(startCord + i, i)) {\n        dragHandler.cordArray[i] = dragHandler.currentPlayerDOM[startCord + i];\n      } else {\n        dragHandler.cordArray.forEach((cord) => {\n          cord.classList.add(\"invalid\");\n        });\n        return setTimeout(() => {\n          dragHandler.cordArray.forEach((cord) => {\n            cord.classList.remove(\"invalid\");\n          });\n        }, 2000);\n      }\n    }\n\n    if (dragHandler.isAvailable() === true) {\n      let lastDOM = dragHandler.cordArray.at(-1);\n      let endCord = dragHandler.getCord(lastDOM);\n\n      horizontalController.markDOMTaken(startCord, endCord);\n      dragHandler.placedCords.push(\n        dragHandler.createShipCordObject(startCord, endCord)\n      );\n      dragHandler.placeNextShip();\n      dragHandler.toggle();\n      dragHandler.toggle();\n    }\n  },\n  isValid(index, startPoint) {\n    if (index % 10 === 0 && startPoint !== 0) {\n      return false; //in other words, if any of the squares cross the border\n    } else {\n      return true;\n    }\n  },\n  markDOMTaken: function (startCord, endCord) {\n    for (startCord; startCord <= endCord; startCord++) {\n      dragHandler.currentPlayerDOM[startCord].classList.remove(\"available\");\n      dragHandler.currentPlayerDOM[startCord].classList.add(\"ship-present\");\n      dragHandler.currentPlayerDOM[startCord].classList.add(\"unavailable\");\n    }\n  },\n};\n\nconst verticalController = {\n  initiate: function (board) {\n    board.forEach((tile) => {\n      tile.addEventListener(\"dragover\", verticalController.highlightPlacement);\n\n      tile.addEventListener(\"dragleave\", verticalController.unhighlight);\n\n      tile.addEventListener(\"drop\", verticalController.placeShip); //unless user toggles\n    });\n  },\n  unhighlight: function (e) {\n    e.preventDefault();\n    dragHandler.cordArray.forEach((cord) => {\n      cord.classList.remove(\"dragover\");\n    });\n  },\n  highlightPlacement: function (e) {\n    e.preventDefault();\n    let shipLength = dragHandler.getShipLength();\n    let startCord = Number(dragHandler.getCord(e.target));\n\n    for (let y = 0; y < shipLength; y++) {\n      if (verticalController.isValid(startCord + y * 10, y * 10)) {\n        dragHandler.cordArray[y] =\n          dragHandler.currentPlayerDOM[startCord + y * 10];\n        dragHandler.currentPlayerDOM[startCord + y * 10].classList.add(\n          \"dragover\"\n        );\n      } else {\n        dragHandler.cordArray.forEach((cord) => {\n          cord.classList.add(\"invalid\");\n        });\n        return setTimeout(() => {\n          dragHandler.cordArray.forEach((cord) => {\n            cord.classList.remove(\"invalid\");\n          });\n        }, 2000);\n      }\n    }\n\n    e.target.classList.add(\"dragover\");\n  },\n  placeShip: function (e) {\n    e.preventDefault();\n    let startCord = Number(dragHandler.getCord(e.target));\n    let shipLength = dragHandler.getShipLength();\n\n    for (let y = 0; y < shipLength; y++) {\n      if (verticalController.isValid(startCord + y * 10, y * 10)) {\n        dragHandler.cordArray[y] =\n          dragHandler.currentPlayerDOM[startCord + y * 10];\n      } else {\n        dragHandler.cordArray.forEach((cord) => {\n          cord.classList.add(\"invalid\");\n        });\n        return setTimeout(() => {\n          dragHandler.cordArray.forEach((cord) => {\n            cord.classList.remove(\"invalid\");\n          });\n        }, 2000);\n      }\n    }\n\n    if (dragHandler.isAvailable() === true) {\n      let lastDOM = dragHandler.cordArray.at(-1);\n      let endCord = dragHandler.getCord(lastDOM);\n\n      verticalController.markDOMTaken(startCord, endCord);\n      dragHandler.placedCords.push(\n        dragHandler.createShipCordObject(startCord, endCord)\n      );\n      dragHandler.placeNextShip();\n      dragHandler.toggle();\n      dragHandler.toggle();\n    }\n  },\n  markDOMTaken: function (startCord, endCord) {\n    let y = startCord;\n    for (y; y <= endCord; y = y + 10) {\n      dragHandler.currentPlayerDOM[y].classList.remove(\"available\");\n      dragHandler.currentPlayerDOM[y].classList.add(\"ship-present\");\n      dragHandler.currentPlayerDOM[y].classList.add(\"unavailable\");\n    }\n  },\n  isValid(index, startPoint) {\n    if (index > 99) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n};\n\nexport { dragHandler };\n","/* eslint-disable */\nimport { gameController } from \"../controllers/game-controller\";\nimport { domController } from \"../controllers/dom-controller\";\nimport { dragHandler } from \"../controllers/drag-n-drop\";\nimport { boardRandomizer } from \"../algorithms/board-randomizer\";\n\nconst mainGameDisplayController = {\n  contentSpace: document.querySelector(\"#content\"),\n  initiate: function (gameObj) {\n    let gameInfoObj = gameController.unpackGame(gameObj);\n    //TODO: continue here as this has all the necessary controls\n\n    let p1BoardDOMContainer = domController.createDOMBoard();\n    let p2BoardDOMContainer = domController.createDOMBoard();\n\n    let title = this.createTitle(gameInfoObj.player1.name);\n    let shipPlacer = this.createShipPlacer();\n    let buttonToolkit = domController.createButtonToolkit();\n    let directionControls = this.createDirectionControls();\n\n    this.contentSpace.appendChild(title);\n    this.contentSpace.appendChild(p1BoardDOMContainer);\n    this.contentSpace.appendChild(directionControls);\n    this.contentSpace.appendChild(buttonToolkit);\n    this.contentSpace.appendChild(shipPlacer);\n\n    //this.showBoard()\n    unpackGameType(gameInfoObj, domController.playerDOMs); //unpack AND start based on GT\n  },\n  showBoard: function () {\n    //refactor initiate\n  },\n  createDirectionControls: function () {\n    const toggleDirectionContainer = document.createElement(\"div\");\n    const toggleDirectionButton = document.createElement(\"button\");\n    const currentDirection = document.createElement(\"div\");\n\n    currentDirection.textContent = `Placing: ${dragHandler.angle}`;\n    toggleDirectionButton.textContent = \"Change placement direction\";\n    toggleDirectionButton.addEventListener(\"click\", dragHandler.toggle);\n    toggleDirectionButton.addEventListener(\"click\", () => {\n      currentDirection.textContent = `Placing: ${dragHandler.angle}`;\n    });\n    toggleDirectionButton.classList.add(\"toggle-direction-button\");\n    toggleDirectionContainer.classList.add(\"toggle-direction-container\");\n    currentDirection.classList.add(\"current-direction\");\n\n    toggleDirectionContainer.appendChild(currentDirection);\n    toggleDirectionContainer.appendChild(toggleDirectionButton);\n\n    return toggleDirectionContainer;\n  },\n  createTitle(pName) {\n    const titleContainer = document.createElement(\"div\");\n    const title = document.createElement(\"h2\");\n\n    titleContainer.appendChild(title);\n\n    title.textContent = `${pName}, please place your ships!`;\n\n    titleContainer.classList.add(\"title-container\");\n    title.classList.add(\"title\");\n\n    return titleContainer;\n  },\n  createShipPlacer: function () {\n    const ships = gameController.getShips();\n    const shipsInDOM = domController.unpackShips(ships);\n\n    return shipsInDOM;\n  },\n};\n\nfunction unpackGameType(gameObj, playerDOMs) {\n  let [p1BoardDOM, p2BoardDOM] = playerDOMs;\n  if (gameObj.gameType === \"pvc\") {\n    gameInfo.set(gameObj.gametype);\n    pvcGameController.initiate(p1BoardDOM);\n  } else {\n    gameInfo.set(gameObj.gametype);\n    pvpGameController.initiate(p1BoardDOM, p2BoardDOM);\n  }\n}\n\nconst gameInfo = {\n  gameType: null,\n  p1Cords: null,\n  p2Cords: null,\n  set: function (gameType) {\n    this.gameType = gameType;\n  },\n  continue: function (placedCords) {\n    if (gameInfo.gameType === \"pvc\") {\n      gameInfo.p1Cords = placedCords;\n      //Find out why the first instance returns same cords\n      pvcGameController.autoPlace();\n      gameInfo.p2Cords = pvcGameController.autoPlace();\n      gameController.startGamePVC(gameInfo.p1Cords, gameInfo.p2Cords);\n    } else {\n      //TODO after PVC\n      gameInfo.p1Cords = placedCords;\n      pvpGameController.nextPlayer();\n    }\n  },\n  resetDrag: function () {\n    dragHandler.reset();\n  },\n};\n\nconst pvcGameController = {\n  initiate: function (p1Board) {\n    //enable drag\n    dragHandler.initiate(p1Board);\n  },\n  autoPlace: function () {\n    let ships = gameController.getShips();\n    let cordArr = boardRandomizer.initiate(ships);\n    boardRandomizer.resetData(); //garbage collection\n    return cordArr;\n  },\n};\n\nconst pvpGameController = {\n  p2Board: null,\n  initiate: function (p1Board, p2Board) {\n    //enable first drag\n    dragHandler.initiate(p1Board);\n    this.p2Board = p2Board;\n  },\n  nextPlayer: function () {\n    dragHandler.initiate(this.p2Board);\n  },\n};\n\nexport { mainGameDisplayController, gameInfo };\n","import { mainGameDisplayController } from \"./main-game\";\n\nconst pvpScreenController = {\n  currentPlayer: 1,\n  contentSpace: document.querySelector(\"#content\"),\n  modalSpace: document.querySelector(\"#modal-reserved-space\"),\n  initiate: function () {\n    let title = this.createTitle();\n    let form = this.createForm();\n\n    this.contentSpace.appendChild(title);\n    this.contentSpace.appendChild(form);\n  },\n\n  createTitle: function () {\n    const titleContainer = document.createElement(\"div\");\n    const title = document.createElement(\"div\");\n    const rules = document.createElement(\"div\");\n\n    title.textContent = `Player ${this.currentPlayer}, please enter your name`;\n    rules.textContent = \"Click me to read a quick rule run-down\";\n\n    titleContainer.appendChild(title);\n    titleContainer.appendChild(rules);\n\n    titleContainer.classList.add(\"title-container\");\n    title.classList.add(\"title\");\n    rules.classList.add(\"rules\");\n\n    this.activateRulesPopup(rules);\n\n    return titleContainer;\n  },\n\n  activateRulesPopup(rules) {\n    rules.addEventListener(\"click\", this.rulesPopup);\n  },\n\n  rulesPopup(e) {\n    e.preventDefault();\n    //Describe pass-n-play, add a counter for 10 seconds to switch.\n    const modalSpace = pvpScreenController.modalSpace;\n    const modal = document.createElement(\"dialog\");\n    const closeModal = document.createElement(\"div\");\n    const para = document.createElement(\"p\");\n\n    para.innerHTML =\n      \"Classic battleship rules. Every hit gives a player another chance at a shot. However, if a player misses: there will be a 10 second window to pass the computer to the other player. <br> <br> The first to win is the first to destroy all ships of the opposing player. Pass and play! Don't cheat, you have 10 seconds exactly for that reason.\";\n    closeModal.textContent = \"x\";\n\n    para.classList.add(\"pnp-rules\");\n    closeModal.classList.add(\"close-pnp-rules\");\n    closeModal.addEventListener(\"click\", modalController.closeModal);\n\n    modalSpace.appendChild(modal);\n    modal.appendChild(closeModal);\n    modal.appendChild(para);\n\n    modalController.openModal(modal);\n  },\n\n  createForm() {\n    let form = document.createElement(\"form\");\n    let nameContainer = document.createElement(\"div\");\n    let nameInput = document.createElement(\"input\");\n    let submitName = document.createElement(\"button\");\n\n    nameInput.setAttribute(\"type\", \"text\");\n    nameInput.setAttribute(\"id\", \"uname\");\n    nameInput.setAttribute(\"name\", \"uname\");\n    nameInput.setAttribute(\"maxlength\", 30);\n    nameInput.setAttribute(\"minlength\", 2);\n\n    submitName.textContent = `Submit Player${this.currentPlayer}'s name`;\n    submitName.classList.add(\"submit-name\");\n\n    form.appendChild(nameContainer);\n    nameContainer.appendChild(nameInput);\n    nameContainer.appendChild(submitName);\n\n    submitName.addEventListener(\"click\", formController.processName);\n\n    return form;\n  },\n  clearAll() {\n    pvpScreenController.contentSpace.textContent = \"\";\n  },\n};\n\nconst modalController = {\n  closeModal: function (e) {\n    e.preventDefault;\n    pvpScreenController.modalSpace.textContent = \"\";\n  },\n  openModal: function (modal) {\n    modal.showModal();\n  },\n};\n\nconst formController = {\n  gameInformation: {\n    player1Name: \"\",\n    player2Name: \"\",\n    type: \"pvp\",\n  },\n  processName: function (e) {\n    e.preventDefault();\n    let uname = document.querySelector(\"#uname\").value;\n\n    if (uname == \"\" || uname === undefined) {\n      uname = `Player${pvpScreenController.currentPlayer}`;\n    }\n\n    formController.createPlayerObj(uname);\n  },\n\n  createPlayerObj: function (uname) {\n    pvpScreenController.currentPlayer === 1\n      ? (formController.gameInformation.player1Name = uname)\n      : (formController.gameInformation.player2Name = uname);\n\n    pvpScreenController.currentPlayer += 1;\n\n    if (pvpScreenController.currentPlayer > 2) {\n      pvpScreenController.clearAll();\n      mainGameDisplayController.initiate(formController.gameInformation);\n      //take players to main-game.js\n    } else {\n      pvpScreenController.clearAll();\n      pvpScreenController.initiate();\n    }\n  },\n};\n\nexport { pvpScreenController };\n","import { mainGameDisplayController } from \"./main-game\";\n\nconst pvcScreenController = {\n  contentSpace: document.querySelector(\"#content\"),\n  initiate: function () {\n    let title = this.createTitle();\n    let difficultyChoice = this.createDifficultyChoice();\n\n    this.contentSpace.appendChild(title);\n    this.contentSpace.appendChild(difficultyChoice);\n  },\n  createTitle: function () {\n    const titleContainer = document.createElement(\"div\");\n    const title = document.createElement(\"h2\");\n\n    title.textContent = \"Please select the difficulty.\";\n\n    titleContainer.appendChild(title);\n\n    return titleContainer;\n  },\n  createDifficultyChoice: function () {\n    const buttonContainer = document.createElement(\"div\");\n    const easyDifficulty = document.createElement(\"button\");\n    const mediumDifficulty = document.createElement(\"button\");\n    const hardDifficulty = document.createElement(\"button\");\n\n    buttonContainer.classList.add(\"difficulty-buttons\");\n    easyDifficulty.classList.add(\"difficulty-select\");\n    mediumDifficulty.classList.add(\"difficulty-select\");\n    hardDifficulty.classList.add(\"difficulty-select\");\n\n    buttonContainer.appendChild(easyDifficulty);\n    buttonContainer.appendChild(mediumDifficulty);\n    buttonContainer.appendChild(hardDifficulty);\n\n    easyDifficulty.textContent = \"Easy\";\n    mediumDifficulty.textContent = \"Medium (Under works)\";\n    hardDifficulty.textContent = \"⚠️Hard⚠️ (Under works)\";\n\n    mediumDifficulty.setAttribute(\"disabled\", \"\");\n    hardDifficulty.setAttribute(\"disabled\", \"\");\n\n    easyDifficulty.addEventListener(\"click\", difficultyController.callEasy);\n    mediumDifficulty.addEventListener(\"click\", difficultyController.callNormal);\n    hardDifficulty.addEventListener(\"click\", difficultyController.callHard);\n\n    return buttonContainer;\n  },\n  clearAll: function () {\n    pvcScreenController.contentSpace.textContent = \"\";\n  },\n};\n\nconst difficultyController = {\n  callEasy: function (e) {\n    e.preventDefault();\n    gameInformation.cDifficulty = \"easy\";\n    pvcScreenController.clearAll();\n    nameFormController.initiate();\n  },\n  callNormal: function (e) {\n    e.preventDefault();\n    gameInformation.cDifficulty = \"medium\";\n    pvcScreenController.clearAll();\n    nameFormController.initiate();\n  },\n  callHard: function (e) {\n    e.preventDefault();\n    gameInformation.cDifficulty = \"hard\";\n    pvcScreenController.clearAll();\n    nameFormController.initiate();\n  },\n};\n\nconst nameFormController = {\n  contentSpace: document.querySelector(\"#content\"),\n  initiate: function () {\n    let title = this.createTitle();\n    let nameForm = this.createForm();\n\n    this.contentSpace.appendChild(title);\n    this.contentSpace.appendChild(nameForm);\n  },\n  createForm: function () {\n    let form = document.createElement(\"form\");\n    let nameContainer = document.createElement(\"div\");\n    let nameInput = document.createElement(\"input\");\n    let submitName = document.createElement(\"button\");\n\n    nameInput.setAttribute(\"type\", \"text\");\n    nameInput.setAttribute(\"id\", \"uname\");\n    nameInput.setAttribute(\"name\", \"uname\");\n    nameInput.setAttribute(\"maxlength\", 30);\n    nameInput.setAttribute(\"minlength\", 2);\n\n    submitName.textContent = `Submit your name`;\n    submitName.classList.add(\"submit-name\");\n\n    form.appendChild(nameContainer);\n    nameContainer.appendChild(nameInput);\n    nameContainer.appendChild(submitName);\n\n    submitName.addEventListener(\"click\", nameFormController.processName);\n\n    return form;\n  },\n  createTitle: function () {\n    const title = document.createElement(\"div\");\n\n    title.textContent = `Player 1, please enter your name`;\n\n    title.classList.add(\"title\");\n\n    return title;\n  },\n  processName: function (e) {\n    e.preventDefault();\n    let uname = document.querySelector(\"#uname\").value;\n\n    if (uname == \"\" || uname === undefined) {\n      uname = `Player1`;\n    }\n\n    gameInformation.player1Name = uname;\n    pvcScreenController.clearAll();\n    mainGameDisplayController.initiate(gameInformation);\n  },\n};\n\nconst gameInformation = {\n  player1Name: \"\",\n  type: \"pvc\",\n  cDifficulty: \"\",\n};\n\nexport { pvcScreenController };\n","/*  Initial load page to get the user input for \n\n1 - name\n2 - type of game (PvP or PvC)\n3 - if PvC, difficulty\n\nNothing else matters - just to load the next page when done\n */\nimport { pvpScreenController } from \"./pvp-screen\";\nimport { pvcScreenController } from \"./pvc-screen\";\n\nconst initialPageController = {\n  contentSpace: document.querySelector(\"#content\"),\n  initiate: function () {\n    let title = this.createTitle();\n    let form = this.createForm();\n\n    this.contentSpace.appendChild(title);\n    this.contentSpace.appendChild(form);\n  },\n  createForm: function () {\n    const form = document.createElement(\"form\");\n    const gameTypeContainer = document.createElement(\"div\");\n    const pvpButton = document.createElement(\"button\");\n    const pvcButton = document.createElement(\"button\");\n\n    gameTypeContainer.classList.add(\"game-type-container\");\n    form.classList.add(\"game-type\");\n    pvpButton.classList.add(\"pvp\");\n    pvcButton.classList.add(\"pvc\");\n\n    pvpButton.textContent = \"Play against a player (Coming soon!)\";\n    pvcButton.textContent = \"Play against a computer\";\n\n    form.appendChild(gameTypeContainer);\n    gameTypeContainer.appendChild(pvpButton);\n    gameTypeContainer.appendChild(pvcButton);\n\n    this.activateListeners(pvpButton, pvcButton);\n\n    pvpButton.setAttribute(\"disabled\", \"\");\n\n    return form;\n  },\n\n  createTitle() {\n    const title = document.createElement(\"h2\");\n\n    title.textContent = \"Play BattleShip\";\n\n    return title;\n  },\n\n  activateListeners(pvpButton, pvcButton) {\n    pvpButton.addEventListener(\"click\", this.loadPVP);\n    pvcButton.addEventListener(\"click\", this.loadPVC);\n  },\n\n  loadPVP(e) {\n    e.preventDefault();\n    initialPageController.garbageCollect();\n    pvpScreenController.initiate();\n  },\n\n  loadPVC(e) {\n    e.preventDefault();\n    initialPageController.garbageCollect();\n    pvcScreenController.initiate();\n  },\n\n  garbageCollect() {\n    this.contentSpace.textContent = \"\";\n  },\n};\n\nexport { initialPageController };\n\n/*Lots of thinking went into deciding whether or not to use Tailwind to speed up frontend. Then I saw their playgroud, Jesus McChrist, I wouldn't touch that with a 10 feet pole lol*/\n","import { initialPageController } from \"./pages/initial-load\";\nimport \"./styles.css\";\n\ninitialPageController.initiate();\n//At this point, index.js is just customary\n"],"names":["Ship","constructor","length","name","this","health","hit","isSunk","Gameboard","player","board","createBoard","missedShots","shipCount","ships","boardPart","yAxis","i","push","x","Tile","xCord","yCord","placeShip","shipObj","cordObj","placementData","ship","unpackShip","direction","placeOnX","placeOnY","forEach","tile","addShip","type","xStart","xEnd","yStart","tileArr","contains","STOP","yEnd","y","receiveAttack","attackCordinates","Array","isArray","Error","attackedTile","attack","message","hasShip","takeHit","isEmpty","shortestShip","positionObj","position","Player","gameboard","opponent","addOpponent","opponentObj","easyAlgorithm","getRandomCord","Math","round","random","play","Computer","difficulty","playerObj","algorithm","getAlgorithm","attackResponse","Node","value","left","right","Tree","arr","root","buildTree","startIndex","endIndex","midIndex","floor","insert","previousNode","currentNode","newValue","bstContains","cordConverter","index","boardRandomizer","cordTree","cordArr","resetData","initiate","assignRandomDirection","Object","keys","key","generateDirectionToken","generateRandomPlacement","placeH","placeV","genRX","genRY","checkCollision","flatCord","getFlattenedCords","shipLength","factor","rX","rY","flatCords","domController","playerDOMs","placeableShips","playerPlacing","currentShipContainer","createDOMBoard","boardContainer","document","createElement","domArr","boardPiece","classList","add","setAttribute","appendChild","unpackShips","shipsObj","container","shipToPlaceContainer","placeShipText","currentShip","textContent","shipDOM","makeShipDraggable","splice","getNextShip","querySelector","nextButton","getShipCount","shipName","shipDetailsContainer","shipNameDisplay","shipContainer","shipPiece","createButtonToolkit","toolKitContainer","randomizeButton","addEventListener","toolkitController","randomizePlacement","markAllPlaced","confirmSelection","e","target","gameInfo","continue","shipCord","resetPlacement","gameController","getShips","unpackCords","cord","fCord","startCord","endCord","markDOMTaken","playerDOM","remove","querySelectorAll","slot","activeGameController","p1DOMBoard","p2DOMBoard","contentSpace","getElementById","activeGameContainer","p1BoardContainer","createP1DOMBoard","infoTableContainer","createInfoTable","p2BoardContainer","createP2DOMBoard","playerNameContainer","createNamesContainer","nameContainer","player1Name","player2Name","turnInfo","clickToSpy","createSpyModal","modal","closeButton","enemyLastAttack","enemyShipData","closeModal","endGameModal","winner","modalSpace","flavorText","restartButton","innerHTML","killswitch","show","window","location","reload","players","turn","createPlayer","unpackGame","gameObj","startPVP","startPVC","player1","player2","cDifficulty","computerControls","gametype","carrier","battleship","cruiser","submarine","destroyer","startGamePVC","p1Cordinates","p2Cordinates","shipArr","values","playerControls","computerControl","p1Object","p2Object","placeShipsOnObj","activateListeners","appendNames","activateSpyTool","p1NameContainer","p2NameContainer","fire","preventDefault","removeEventListener","getCord","playerShoots","attackCords","attackInfo","console","log","computerLost","endGame","computerResponds","playerLost","lastAttackData","p2LastAttackResponse","hitTile","getAttribute","substring","getEnemyInformation","dragHandler","playerBoardDOM","currentPlayerDOM","angle","cordArray","placedCords","playerBoard","enableDrag","getShipLength","childNodes","children","horizontalController","createShipCordObject","shipDirection","isAvailable","cordList","areValid","placeNextShip","disableV","verticalController","highlightPlacement","unhighlight","disableH","toggle","Number","isValid","setTimeout","lastDOM","at","startPoint","mainGameDisplayController","gameInfoObj","p1BoardDOMContainer","title","createTitle","shipPlacer","createShipPlacer","buttonToolkit","directionControls","createDirectionControls","p1BoardDOM","p2BoardDOM","gameType","set","pvcGameController","pvpGameController","unpackGameType","showBoard","toggleDirectionContainer","toggleDirectionButton","currentDirection","pName","titleContainer","p1Cords","p2Cords","autoPlace","nextPlayer","resetDrag","reset","p1Board","p2Board","pvpScreenController","currentPlayer","form","createForm","rules","activateRulesPopup","rulesPopup","para","modalController","openModal","nameInput","submitName","formController","processName","clearAll","showModal","gameInformation","uname","undefined","createPlayerObj","pvcScreenController","difficultyChoice","createDifficultyChoice","buttonContainer","easyDifficulty","mediumDifficulty","hardDifficulty","difficultyController","callEasy","callNormal","callHard","nameFormController","nameForm","initialPageController","gameTypeContainer","pvpButton","pvcButton","loadPVP","loadPVC","garbageCollect"],"sourceRoot":""}